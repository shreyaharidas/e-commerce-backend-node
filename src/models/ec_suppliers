// models/User.js

const { DataTypes } = require('sequelize');
const sequelize = require('../config/sequelize-config'); // Import the Sequelize instance
const bcrypt = require('bcrypt');

const ec_suppliers = sequelize.define('ec_suppliers', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
    allowNull: false,
  },
  full_name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  e_mail:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  password: {
    type: DataTypes.STRING, // or DataTypes.TEXT
    allowNull: false,
    set(value) {
      // Hash the password before saving it to the database
      const hashedPassword = bcrypt.hashSync(value, bcrypt.genSaltSync(10));
      this.setDataValue('password', hashedPassword);
    },
  },
  profile_pic:{
    type:DataTypes.BLOB, // or DataTypes.TEXT
    allowNull: true,
  },
  registration_id:{
    type:DataTypes.STRING,
    allowNull: false,
  },
  registration_time_stamp:{
    type:DataTypes.TIME,
    allowNull: false,
  }
 
});

module.exports = ec_suppliers ;


// // Assuming user is the Sequelize model instance retrieved from the database
// const hashedPasswordFromDatabase = user.password;

// // Compare the plaintext password input against the stored hashed password
// const isPasswordValid = bcrypt.compareSync(plainTextPasswordInput, hashedPasswordFromDatabase);

// if (isPasswordValid) {
//   // Password is valid, proceed with authentication
// } else {
//   // Password is invalid, handle authentication failure
// }

